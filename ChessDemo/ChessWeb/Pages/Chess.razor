@page "/Chess"
@using ChessCommon
@using ChessCommon.Models
@using System.Diagnostics
@using System.Text;
<PageTitle>Chess</PageTitle>

@inject ChessService chessService

<head>
    <title></title>
    <meta charset="UTF-8">
    <style>
        .chess-info {
            margin-bottom: 20px;
            padding: 5px
        }
        .chess-board { border-spacing: 0; border-collapse: collapse; }
        .chess-board th { padding: .5em; }
        .chess-board td { border: 1px solid;  }
        .chess-board .light { background: #eee; }

            .chess-board .dark {
                background: #75abbc;
            }
    </style>

    <script>
        function allowDrop(ev) {
            ev.preventDefault();
        }

        function drag(ev) {
            ev.dataTransfer.setData("Text", ev.target.id);
        }

        function drop(ev) {
            let data = ev.dataTransfer.getData("Text");
            ev.target.appendChild(document.getElementById(data));
            ev.preventDefault();
        }
    </script>
</head>
<body>

    <div>
        <div style="padding: 5px; float:left">
            <h2>Play</h2>
            <div class="chess-info" style="clear:both">
                <div style="clear:both">
                    <div style="float:left">
                        <b>AutoPlay   </b>
                     </div>
                    <div style="float:left;margin-left: 10px">
                        <input type="radio" id="autoPlay" name="drone" @onclick="EnableAutoPlay" value="huey" checked />
                        <label for="autoPlay">Enable</label>
                        <input type="radio" id="disableAutoPlay" name="drone" value="dewey" @onclick="DisableAutoPlay" />
                        <label for="disableAutoPlay">Disable</label>
                    </div>
                </div>

                <div style="padding-top:10px;clear:both">
                    <button class="btn btn-primary btn-sm" @onclick="Play">  Play </button>
                    <button @onclick="NextMove" class="btn btn-outline-info btn-sm">Next Move</button>
                    <button @onclick="PrevMove" class="btn btn-outline-info btn-sm">Prev Move</button>
                </div>
            </div>

            <h2>Evaluate</h2>
            <div class="chess-info" style="clear:both">
                <div style="margin-bottom: 10px; clear:both">
                    <button @onclick="EvaluateMove" class="btn btn-primary btn-sm"> Evaluate (@depth)  </button>
                    <button @onclick="IncCount" class="btn btn-outline-info btn-sm">Up</button>
                    @depth
                    <button @onclick="DecCount" class="btn btn-outline-info btn-sm">Down</button>
                </div>
                <div style="margin-bottom: 5px; clear:both">  Move Position:  @movePosition    </div>
                <div style="margin-bottom: 5px; clear:both">  Move Value:  @moveValue  (@moveCounter)  </div>
                <div style="margin-bottom: 5px; clear:both">  Move Time:  @moveTime </div>
            </div>

            <h2>Save\Load Game</h2>
            <div class="chess-info" style="clear:both">
                <input type="text" @bind="csvFile" placeholder="" />
                <button class="btn btn-primary  btn-sm" @onclick="SaveBoard">
                    Save
                </button>
                <button class="btn btn-primary  btn-sm" @onclick="LoadBoard">
                    Load
                </button>
            </div>

            <h2>Info</h2> 
                <div class="chess-info" style="clear:both">
            
               <div>
                    <table class="table">
                        <thead class="thead-dark">
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">White</th>
                                <th scope="col">Black</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th scope="row">Current Player</th>
                                <td>@isCurrentPlayer(PieceColor.White)</td>
                                <td>@isCurrentPlayer(PieceColor.Black)</td>
                            </tr>
                            <tr>
                                <th scope="row">Check</th>
                                <td>@isWhiteCheck</td>
                                <td>@isBlackCheck</td>
                            </tr>
                            <tr>
                                <th scope="row">Mate</th>
                                <td>@isWhiteMate</td>
                                <td>@isBlackMate</td>
                            </tr>
                            <tr>
                                <th scope="row">Left-Castle</th>
                                <td>@chessEngine.WhiteCastlingState.IsLeftCastlingEnabled</td>
                                <td>@chessEngine.BlackCastlingState.IsLeftCastlingEnabled</td>
                            </tr>
                            <tr>
                                <th scope="row">Right-Castle</th>
                                <td>@chessEngine.WhiteCastlingState.IsRightCastlingEnabled</td>
                                <td>@chessEngine.BlackCastlingState.IsRightCastlingEnabled</td>
                            </tr>
                        </tbody>
                    </table>

               </div>

          
                <div style="margin-bottom: 10px; padding: 5px;clear:both">
                    @Info
                </div>
            </div>

        </div>
        <div>         <H1> @(isMate ? "Mate" : "") </H1></div>
        <div style="margin-bottom: 46px;border: blue;  border-width: 5px;   border-style: solid; padding: 5px; float:left">
    
            <table class="chess-board">
                <tbody>
          
                    @for (var y = 0; y < Board.MAX_COLS; y++)
                    {
                        <tr>
                            <td>@(8 - y)</td>
                            @for (char c = 'a'; c <= 'h'; c++)
                            {
                                int x = CommonUtils.PositionFromFile(c);

                                Position position = new Position(c + (8 - y).ToString());
                                string className = (y + x) % 2 == 0 ? "light" : "dark";
                                Piece? piece = chessEngine.GetPiece(position);

                                <td draggable="true"
                                    ondragover="allowDrop(event)"
                                    @ondragstart="@(e => HandleDragEnter(e,position))"
                                    @ondrop="@(e => HandleDragDroped(e,position))"
                                    width="70px" height="70px" style="font-size:40px; text-align:center;" class="@className">
                                    @ChessService.GetIcon(piece)
                                </td>
                            }



                        </tr>
                    }
                    <tr>
                        <th> </th>
                        <th>a </th>
                        <th>b</th>
                        <th>c</th>
                        <th>d</th>
                        <th>e</th>
                        <th>f</th>
                        <th>g</th>
                        <th>h</th>
                    </tr>
                </tbody>
            </table>
            </div>

    </div>

</body>

@code {
    private int depth = 1;
    private ChessEngine chessEngine;
    private Position originalPosition;

    //Evaluate move.
    private string movePosition=  string.Empty;
    private int? moveCounter = null;
    private int? moveValue = null;
    private string moveTime= string.Empty;


    private string currentPlayer = "";
    private string csvFile = "";
    private string Info = "";

    private bool isWhiteCheck = false;
    private bool isWhiteMate = false;

    private bool isBlackCheck = false;
    private bool isBlackMate = false;

    private bool isMate = false;
    private bool isAutoPay = true;

    private string isCurrentPlayer(PieceColor color) => chessEngine.CurrentPlayer ==color ? "YES" : "NO";

    //Next & Prev
    private void NextMove() =>  chessEngine.Next();
    private void PrevMove()=> chessEngine.Prev();

    //Counter
    private void IncCount() =>    depth++;
    private void DecCount() =>   depth--;

    private void DisableAutoPlay() => isAutoPay = false;
    private void EnableAutoPlay() => isAutoPay = true;

    private void Play()=>  chessEngine.PlayBestMove(depth);

    private void SaveBoard() => chessEngine.SaveBoard(csvFile);

    private void LoadBoard()=>  Info = ChessService.LoadBoard(chessEngine, csvFile);

    private void EvaluateMove()
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();

        (movePosition, moveCounter, moveValue) = chessEngine.EvaluateBestMove(depth, chessEngine.CurrentPlayer);
        moveTime = $"{stopwatch.Elapsed.Minutes}:{stopwatch.Elapsed.Seconds}:{stopwatch.Elapsed.Milliseconds}";

        stopwatch.Stop();
    }

    protected override async Task OnInitializedAsync()
    {
        chessEngine = chessService.GetChessEngine();
    }

    private async Task HandleDragDroped(DragEventArgs e, Position destination)
    {
        var isLegalMove = chessEngine.IsLegalMove(originalPosition, destination);

        if (isLegalMove)
        {
            chessEngine.DropPiece(originalPosition, destination);
            currentPlayer = chessEngine.CurrentPlayer.ToString();

            if (isAutoPay && !isMate)
            {
                await Task.Delay(1000 / depth);
                Play();
            }
        }
    }

    private void HandleDragEnter(DragEventArgs e, Position position)
    {
        originalPosition = position;
    }


}
